	#Конфигурация Nginx

# Этот блок определяет группу серверов (upstream) с именем phpfpm, которая будет использоваться для обработки PHP. В данном случае используется механизм балансировки нагрузки (ip_hash;), который направляет запросы от одного и того же IP-адреса на один и тот же сервер в upstream.
# 1. ip_hash;: Эта директива устанавливает механизм балансировки нагрузки. Это означает, что приложение будет использовать хеш IP-адреса клиента для выбора сервера в группе upstream. Это позволяет сохранить сессию пользователя на одном и том же сервере, для поддержки состояния сеанса.
# 2. server container-2:9000;: Эта строка определяет первый сервер в группе upstream. Он находится в контейнере с именем container-2 и прослушивает порт 9000 для обработки запросов PHP-FPM.

upstream phpfpm {
ip_hash;

# Список серверов для балансировки запросов
server container-2:9000;
server container-2fpm1:9000;
server container-2fpm2:9000;
server container-2fpm3:9000;
}



server {

	# Этот блок определяет настройки для виртуального сервера, который прослушивает порт 80 как на IPv4, так и на IPv6.
	# 1. listen 80 default_server;: Эта директива указывает Nginx прослушивать порт 80 на IPv4. Опция default_server указывает, что этот сервер будет обрабатывать запросы, которые не сопоставлены ни одному другому виртуальному серверу.
	# 2. listen [::]:80 default_server;: Эта директива указывает Nginx прослушивать порт 80 на IPv6. Аналогично, опция default_server указывает на то, что этот сервер будет обрабатывать запросы, которые не сопоставлены ни одному другому виртуальному серверу.
	# 3. charset utf-8;: Эта директива устанавливает кодировку символов UTF-8 для данного виртуального сервера, что позволяет корректно обрабатывать символы на всех языках.
	# 4. server_name _;: Эта директива устанавливает имя сервера. Здесь _ используется как специальное значение, указывающее, что сервер будет обрабатывать запросы, поступающие на любое имя хоста (не указанное явно).

	listen 80 default_server;
	listen [::]:80 default_server;
	charset utf-8;
	server_name _;



	# Этот блок обрабатывает запросы к корневому URL-адресу сервера.
	# 1. $uri указывает на текущий запрошенный URI.
	# 2. $uri/ пытается найти индексный файл в каталоге, соответствующем текущему URI. Если URI представляет собой директорию, то эта директива обращается к индексному файлу в этой директории.
	# 3. =404 задает ответ 404 (Not Found), если не найден ни файл, ни директория, соответствующие текущему URI.

	location / {
		try_files $uri $uri/ =404;
	}



	# Этот блок используется для обработки запросов к файлам PHP.
   	# 1. location ~ \.php$ : Эта строка определяет блок, который будет применяться к запросам, оканчивающимся на .php. Символ ~ указывает на использование регулярного выражения для сопоставления запросов.
   	# 2. fastcgi_pass phpfpm;: Эта директива указывает Nginx, куда отправлять запросы на обработку PHP. Здесь phpfpm - это имя пула PHP-FPM, указанный в блоке upstream или IP-адрес и порт сервера PHP-FPM.
   	# 3. proxy_next_upstream error;: Эта директива указывает Nginx, как обрабатывать ошибки при передаче запроса на сервер PHP-FPM. Здесь указано, что при возникновении ошибки на текущем сервере, запрос будет передан следующему серверу из списка.
   	# 4. root /var/www/html;: Эта директива устанавливает корневой каталог для обработки запросов. Все файлы PHP будут искаться внутри этой директории.
   	# 5. fastcgi_index index.php;: Эта директива указывает Nginx на индексный файл, который будет использоваться по умолчанию при запросе к директории.
   	# 6. fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;: Эта директива устанавливает переменную SCRIPT_FILENAME, которая передается в PHP-FPM и указывает путь к запрашиваемому файлу PHP.
   	# 7. fastcgi_split_path_info ^(.+\.php)(/.+)$;: Эта директива определяет, как Nginx будет разбивать путь к скрипту PHP. Регулярное выражение ^(.+\.php)(/.+)$ разбивает путь на две части: путь к файлу .php и дополнительную информацию после имени файла.
   	# 8. include fastcgi.conf;: Эта директива включает дополнительную конфигурацию для FastCGI обработки, которая содержит настройки соединения и обработки запросов к PHP-скриптам.

	location ~ \.php$ {
		fastcgi_pass phpfpm;
		proxy_next_upstream error;
		root /var/www/html;
		fastcgi_index index.php;
		fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		include fastcgi.conf;
	}



	# Запрещаем доступ к скрытым файлам, таким как .htaccess, .htpasswd, .DS_Store (Mac).
    # 1. location ~ /\. : Эта строка определяет блок, который будет применяться к запросам, направленным к файлам и директориям, начинающимся с точки. Символ ~ указывает на использование регулярного выражения для сопоставления запросов.
   	# 2. deny all;: Эта директива запрещает доступ ко всем файлам и директориям, совпадающим с шаблоном, указанным в блоке. Все запросы, соответствующие этому шаблону, будут отклонены с кодом ответа 403 (Forbidden).

	location ~ /\. {
		deny all;
	}



	# Директивы для отправки заголовков expires и отключения логирования ошибок 404.
	# Данный блок применяется для управления кэшированием статических ресурсов, таких как JavaScript, CSS, изображения и иконки.
    # 1. location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ : Эта строка определяет блок, который будет применяться к запросам, соответствующим регулярному выражению \.(js|css|png|jpg|jpeg|gif|ico)$, что означает любой файл с расширением .js, .css, .png, .jpg, .jpeg, .gif или .ico, независимо от регистра символов.
    # 2. expires 24h;: Эта директива устанавливает заголовок Expires в ответе на запрос для указанных ресурсов. Он указывает браузеру, сколько времени он должен кэшировать ресурс до того, как сделать новый запрос на сервер. В данном случае установлен срок кэширования в 24 часа.
    # 3. log_not_found off;: Эта директива управляет записью в лог файлов, которые не были найдены на сервере. Установка значения off отключает запись в лог о таких событиях, что может быть полезно для снижения размера логов и уменьшения нагрузки на сервер при обработке множества запросов к несуществующим файлам.
	# В целом, этот блок конфигурации помогает улучшить производительность веб-приложения за счет кэширования статических ресурсов на стороне клиента и снижения нагрузки на сервер при обработке запросов.

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires 24h;
        log_not_found off;

    }
}